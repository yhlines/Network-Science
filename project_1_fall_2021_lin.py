# -*- coding: utf-8 -*-
"""Project-1-Fall-2021_Lin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KSyprQ8xZQ3vdXN6Vdtj6bQdJC7gPRM-

# Project One: Due September 12, 2021, 11:59PM
"""

# Commented out IPython magic to ensure Python compatibility.
# Required Header
# %matplotlib inline

import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
import random

"""## Get a edge list data set
### 1. Download a edge list that has more than 1000 nodes. Careful not to pick very large graphs
### 2. Store the edge list as a graph call it it G1
"""

#el = open ("Module-1-EdgeList-1.txt", 'rb') # open file and rb is for read-binary
el = open ("email-Eu-core.txt", 'rb')
G1 = nx.read_edgelist(el, nodetype=int) # edges on each line of the input
el.close() # we can close the file now

"""## Plot the graph G1 without node numbers"""

degree_sequence = [d for n, d in G1.degree()]
nx.draw_circular(G1, node_color='C0',node_size=1,with_labels=False)
plt.show()

"""## Find the degree of each node in G1 and draw a histogram: nodes on the x-axis and degree on the y-axis"""

n = 0
m = 1
degreeHist = [] # create a vector (or think of this as an array)
for d in degree_sequence:
    for x in range(0, d):
        degreeHist.append(m)
        n+=1
    m+=1
plt.hist(degreeHist, bins=len(G1))
plt.xlabel('Node Numbers')
plt.ylabel('Degrees of Nodes')
plt.title('Nodes and Degrees')
plt.show()

"""## Find the average degree of nodes in G1"""

ave = sum(degree_sequence)/len(degree_sequence)
print('The average degree of nodes is %.2f' % ave)

"""## Find the number of edges in the graph G1"""

num = sum(degree_sequence)/2
print('The number of the edges in G1 is %d' % num)

"""## Construct a G2 from G1 by adding edges randomly to nodes in G1 whose degree is less than 5; For example if node 10 has a degree 3, we add two new edges (in random). Note that when you add an edge (10, 19), node 19 also gains a degree."""

#I'm not sure what kind of randomly add edges it is. so this is how I do to add edges.
G2 = G1.copy()         #Asign G1 on G2

#Get the nodes number with edges less than 5 
nodes_lessThanFive = [x for x in G2.nodes() if G2.degree(x) < 5]
#Get the nodes number with edges no less than 5
nodes_moreThanFive = [x for x in G2.nodes() if G1.degree(x) >= 5]

#Get the size of each of the array of the nodes
lenLess = len(nodes_lessThanFive)
lenMore = len(nodes_moreThanFive)
#For each node has degree less than 5, randomly add two more edges.
#It might add two new edges or one or none depends on what it's existing edges are.
for x in range(0, lenLess):
    G2.add_edge(x, nodes_moreThanFive[random.randint(0,lenMore-1)])
    G2.add_edge(x, nodes_moreThanFive[random.randint(0,lenMore-1)])
# Add edges in G2 with the first node has less than 5 degree, and
# second nodes randomly pick from nodes no less than 5. Add twice.

"""## Plot the subgraph G2 without node numbers"""

nx.draw_circular(G2, node_color='C0',node_size=5,with_labels=False)
plt.show()

"""## Find the number of edges in the graph G2"""

degree_sequence2 = [d for n, d in G2.degree()]
print('The number of the edges of G2 is', sum(degree_sequence2)/2)

"""## Find the average degree of the graph G1 and G2"""

numOne = sum(degree_sequence)/len(G1)
numTwo = sum(degree_sequence2)/len(G2)
print('The number of the average degree of nodes in G1 is %.2f' % numOne)
print('The number of the average degree of nodes in G2 is %.2f' % numTwo)

"""## Create erdos_renyni graph with same number of nodes as in G2"""

H1 = nx.erdos_renyi_graph(len(G2),0.01)

"""## Plot the graph H1 without node numbers"""

nx.draw(H1, node_color='C0',node_size=5, with_labels=False)
plt.show()

"""## Find the degree of each node in H1 and draw a histogram: nodes on the x-axis and degree on the y-axis"""

degree_sequenceH1 = [d for n, d in H1.degree()] 
p = 0
q = 0
degreeHistH = [] # create a vector (or think of this as an array)
for d in degree_sequenceH1:
    for x in range(0, d):
        degreeHistH.append(q)
        p+=1
    q+=1
plt.hist(degreeHistH, bins=len(H1))
plt.xlabel('Node Numbers')
plt.ylabel('Degrees of Nodes')
plt.title('Nodes and Degrees')
plt.show()

"""## Find the average degree of nodes in H1"""

numH = sum(degree_sequenceH1)/len(H1)
print('The number of the average degree of nodes in H1 is %d' % numH)

"""## Construct a subgraph H2 from H1 by removing nodes whose degree is less than 2 times the average degree and nodes whose degree is greater than 2 times the avearge degree"""

H2 = H1.copy()

remove_less = [x for x in H2.nodes() if H2.degree(x) < numH*2]
remove_greater = [x for x in H2.nodes() if H2.degree(x) > numH*2]
for x in remove_less:
    H2.remove_node(x)
for x in remove_greater:
    H2.remove_node(x)

"""## Plot the subgraph H2 without node numbers"""

nx.draw(H2, node_color='C0',node_size=200, with_labels=False)
plt.show()
# I got nothing here because all the nodes with less or greater than 2 times the average are gone
# And unfortunitely, there is no nodes with exactly two times the average.

"""## Compare G2 and H2"""

#I might do it wrong but seems like they have no relationship
#G2 has more edges than G1 and H1 is from erdos_renyni graph same nodes number with G2
#H2 has almost nothing because it almost removed all the nodes.